package terrastack

import (
	"fmt"
	"os"
	"path/filepath"
)

const (
	// GeneratedTfFilename is the name of the terrastack generated tf file.
	GeneratedTfFilename = "_gen_terrastack.tsk.tf"

	// GeneratedCodeHeader is the header added on all generated files.
	GeneratedCodeHeader = "GENERATED BY TERRASTACK: DO NOT EDIT"
)

// Generate will walk all the directories starting from basedir generating
// code for any stack it finds as it goes along
//
// It will return an error if it finds any invalid terrastack configuration files
// of if it can't generate the files properly for some reason.
//
// The provided basedir must be an absolute path to a directory.
func Generate(basedir string) error {
	if !filepath.IsAbs(basedir) {
		return fmt.Errorf("Generate(%q): basedir must be an absolute path", basedir)
	}

	info, err := os.Lstat(basedir)
	if err != nil {
		return fmt.Errorf("Generate(%q): checking basedir: %v", basedir, err)
	}

	if !info.IsDir() {
		return fmt.Errorf("Generate(%q): basedir is not a directory", basedir)
	}

	stacks, err := ListStacks(basedir)
	if err != nil {
		return fmt.Errorf("Generate(%q): listing stack: %v", basedir, err)
	}

	for _, stack := range stacks {
		genfile := filepath.Join(stack.Dir, GeneratedTfFilename)
		// TODO(katcipis): error handling + proper implementation

		os.WriteFile(genfile, []byte(GeneratedCodeHeader), 0666)
	}

	return nil
}
